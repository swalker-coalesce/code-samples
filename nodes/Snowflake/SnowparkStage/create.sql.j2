{{ stage('Create Stage Table') }}

	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
	(
		{%- for col in columns %}
			"{{ col.name }}" {{ col.dataType }}
			{%- if not col.nullable %} NOT NULL
				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
			{% endif %}
			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
			{%- if not loop.last -%}, {% endif %}
		{% endfor %}
	)
	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}



{{ stage('Create Python Procedure ') }}
{% set source = sources[0] %}

CREATE OR REPLACE PROCEDURE {{ ref_no_link(node.location.name, 'PROC_' + node.name | upper) | trim }}()
  returns string not null
  language python
  runtime_version = '3.8'
  packages = ('snowflake-snowpark-python', 'pandas','scikit-learn','numpy','snowflake-ml-python') 
  handler = 'stage_py'
as
$$
{{ config.pyLib }}

def stage_py(snowpark_session):
  df_raw = snowpark_session.sql('''SELECT 
  {%- for col in source.columns %}
    {{ get_source_transform(col) }} AS "{{ col.name }}"
	{%- if not loop.last -%}, {% endif %}
  {%- endfor %} {{ source.join }} '''.rstrip())

{%- set dfca = config.dfcmd.split('\n') %}
{%- for dfc in dfca %}
  {{ dfc.lstrip() }}
{%- endfor %}
  df_final.write.mode("{{config.writeMode}}").save_as_table('{{this}}')
  return str(df_raw.count()) + " rows input - " +  str(df_final.count()) + " rows output"
$$